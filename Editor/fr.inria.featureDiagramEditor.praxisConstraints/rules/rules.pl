% imported meta models

importedMetaModel('').

% rules

noTwoFeaturesHaveSameName(FeatureName) :- (library(temporalFormula(last, [create(FeatureDiagram, featurediagram, _)])), library(temporalFormula(last, [addReference(FeatureDiagram, features, Feature, _)])), library(temporalFormula(last, [create(Feature, feature, _)])), library(temporalFormula(last, [addReference(FeatureDiagram, features, OtherFeature, _)])), library(temporalFormula(last, [create(OtherFeature, feature, _)])), not(library(equal(Feature, OtherFeature))), library(temporalFormula(last, [addProperty(Feature, name, FeatureName, _)])), library(temporalFormula(last, [addProperty(OtherFeature, name, FeatureName, _)]))).
noMutexReflexive(CEDGE, FeatureName) :- (library(temporalFormula(last, [addReference(CEDGE, source, Feature, _)])), library(temporalFormula(last, [addReference(CEDGE, target, Feature, _)])), library(temporalFormula(last, [create(Mutex, mutex, _)])), library(temporalFormula(last, [addReference(CEDGE, constraint, Mutex, _)])), library(temporalFormula(last, [addProperty(Feature, name, FeatureName, _)]))).
noRequireReflexive(CEDGE, FeatureName) :- (library(temporalFormula(last, [addReference(CEDGE, source, Feature, _)])), library(temporalFormula(last, [addReference(CEDGE, target, Feature, _)])), library(temporalFormula(last, [create(Require, require, _)])), library(temporalFormula(last, [addReference(CEDGE, constraint, Require, _)])), library(temporalFormula(last, [addProperty(Feature, name, FeatureName, _)]))).
noSeveralMutexOnSameFeature(Feature1, Feature2, Feature1Name, Feature2Name, CEMutex1, CEMutex2) :- (library(temporalFormula(last, [addProperty(Feature1, name, Feature1Name, _)])), library(temporalFormula(last, [addProperty(Feature2, name, Feature2Name, _)])), isMutex(Feature1, Feature2, CEMutex1), isMutex(Feature1, Feature2, CEMutex2), not(library(equal(CEMutex2, CEMutex1)))).
noCyclesOnRequire(FeatureDiagram, FeatureName1, FeatureName2) :- (library(temporalFormula(last, [create(FeatureDiagram, featurediagram, _)])), library(temporalFormula(last, [addReference(FeatureDiagram, features, Feature1, _)])), library(temporalFormula(last, [addReference(FeatureDiagram, features, Feature2, _)])), library(temporalFormula(last, [addProperty(Feature1, name, FeatureName1, _)])), library(temporalFormula(last, [addProperty(Feature2, name, FeatureName2, _)])), library(temporalFormula(last, [addReference(FeatureDiagram, constraintedges, CE, _)])), library(temporalFormula(last, [create(CE, constraintedge, _)])), library(temporalFormula(last, [addReference(CE, source, Feature1, _)])), library(temporalFormula(last, [addReference(CE, target, Feature2, _)])), library(temporalFormula(last, [addReference(CE, constraint, Require, _)])), library(temporalFormula(last, [create(Require, require, _)])), library(temporalFormula(last, [addReference(FeatureDiagram, constraintedges, CE2, _)])), library(temporalFormula(last, [create(CE2, constraintedge, _)])), library(temporalFormula(last, [addReference(CE2, source, Feature2, _)])), library(temporalFormula(last, [addReference(CE2, target, Feature1, _)])), library(temporalFormula(last, [addReference(CE2, constraint, Require2, _)])), library(temporalFormula(last, [create(Require2, require, _)]))).
noBothRequireAndMutexOnSameFeatures(FeatureDiagram, Feature1, Feature2, FeatureName1, FeatureName2) :- (library(temporalFormula(last, [addProperty(Feature1, name, FeatureName1, _)])), library(temporalFormula(last, [addProperty(Feature2, name, FeatureName2, _)])), library(temporalFormula(last, [create(CEMutex1, constraintedge, _)])), library(temporalFormula(last, [addReference(FeatureDiagram, constraintedges, CEMutex1, _)])), library(temporalFormula(last, [create(Mutex1, mutex, _)])), library(temporalFormula(last, [addReference(CEMutex1, source, Feature1, _)])), library(temporalFormula(last, [addReference(CEMutex1, target, Feature2, _)])), library(temporalFormula(last, [addReference(CEMutex1, constraint, Mutex1, _)])), ((library(temporalFormula(last, [create(CERequire1, constraintedge, _)])), library(temporalFormula(last, [addReference(FeatureDiagram, constraintedges, CERequire1, _)])), library(temporalFormula(last, [create(Require1, require, _)])), library(temporalFormula(last, [addReference(CERequire1, source, Feature1, _)])), library(temporalFormula(last, [addReference(CERequire1, target, Feature2, _)])), library(temporalFormula(last, [addReference(CERequire1, constraint, Require1, _)]))); (library(temporalFormula(last, [create(CERequire2, constraintedge, _)])), library(temporalFormula(last, [addReference(FeatureDiagram, constraintedges, CERequire2, _)])), library(temporalFormula(last, [create(Require2, require, _)])), library(temporalFormula(last, [addReference(CERequire2, source, Feature2, _)])), library(temporalFormula(last, [addReference(CERequire2, target, Feature1, _)])), library(temporalFormula(last, [addReference(CERequire2, constraint, Require2, _)]))))).
minCardLargerThanZero(Op, Min, Feature, FeatureName) :- (library(temporalFormula(last, [addReference(Feature, operator, Op, _)])), library(temporalFormula(last, [addProperty(Feature, name, FeatureName, _)])), library(temporalFormula(last, [addProperty(Op, min, Min, _)])), library(lt(Min, 0))).
noMinGreaterThanMax(Op, Feature, FeatureName) :- (library(temporalFormula(last, [addReference(Feature, operator, Op, _)])), library(temporalFormula(last, [addProperty(Feature, name, FeatureName, _)])), library(temporalFormula(last, [addProperty(Op, min, Min, _)])), library(temporalFormula(last, [addProperty(Op, max, Max, _)])), library(lt(Max, Min)), not(library(eq(Max, -1)))).
noMaxLessThanMinusOne(Op, Feature, FeatureName) :- (library(temporalFormula(last, [addReference(Feature, operator, Op, _)])), library(temporalFormula(last, [addProperty(Feature, name, FeatureName, _)])), library(temporalFormula(last, [addProperty(Op, max, Max, _)])), library(lt(Max, -1))).
nbFeaturesMustBeMoreThanMin(Op, FeatureParent, FeatureName) :- (library(temporalFormula(last, [addReference(FeatureParent, operator, Op, _)])), library(temporalFormula(last, [addProperty(FeatureParent, name, FeatureName, _)])), library(setof(FeatureChild, inOperator(FeatureParent, FeatureChild, Op), Features)), library(temporalFormula(last, [addProperty(Op, min, Min, _)])), library(length(Features, L)), library(lt(L, Min))).
inOperator(FeatureParent, FeatureChild, Operator) :- (library(temporalFormula(last, [addReference(FeatureParent, operator, Operator, _)])), library(temporalFormula(last, [addReference(Operator, features, FeatureChild, _)]))).
orOperatorMustHaveAtLeastTwoOperands(Op, FeatureParent, FeatureName) :- (library(temporalFormula(last, [addProperty(FeatureParent, name, FeatureName, _)])), mustHavaMoreThanTwoOperands(Op, FeatureParent), library(isTypeOf(Op, or))).
mustHavaMoreThanTwoOperands(Op, FeatureParent) :- (library(temporalFormula(last, [addReference(FeatureParent, operator, Op, _)])), library(setof(FeatureChild, inOperator(FeatureParent, FeatureChild, Op), Features)), library(length(Features, L)), library(lt(L, 2))).
altOperatorMustHaveAtLeastTwoOperands(Op, FeatureParent, FeatureName) :- (library(temporalFormula(last, [addProperty(FeatureParent, name, FeatureName, _)])), mustHavaMoreThanTwoOperands(Op, FeatureParent), library(isTypeOf(Op, alternative))).
isMutex(Feature1, Feature2, CEMutex) :- ((library(temporalFormula(last, [addReference(CEMutex, source, Feature1, _)])), library(temporalFormula(last, [addReference(CEMutex, target, Feature2, _)])), library(temporalFormula(last, [create(Mutex, mutex, _)])), library(temporalFormula(last, [addReference(CEMutex, constraint, Mutex, _)]))); (library(temporalFormula(last, [addReference(CEMutex, source, Feature2, _)])), library(temporalFormula(last, [addReference(CEMutex, target, Feature1, _)])), library(temporalFormula(last, [create(Mutex2, mutex, _)])), library(temporalFormula(last, [addReference(CEMutex, constraint, Mutex2, _)])))).
isParent(FeatureParent, Feature) :- (library(temporalFormula(last, [addReference(Feature, owningoperator, Op, _)])), library(temporalFormula(last, [addReference(FeatureParent, operator, Op, _)]))).
isAncestor(SearchedFeature, L, CurrentFeature) :- ((isParent(SearchedFeature, CurrentFeature)); (library(setof(FParent, isParent(FParent, CurrentFeature), FeatureParents)), library(append(L, FeatureParents, L2)), ((L2)=([CurrentFeature| T])), ((T)=([NextFeature| T1])), isAncestor(SearchedFeature, T, NextFeature))).
noAncestorFeatureAsChildren(FeatureAncestor, Feature, FeatureAncestorName, FeatureName, Op) :- (library(temporalFormula(last, [addProperty(FeatureAncestor, name, FeatureAncestorName, _)])), library(temporalFormula(last, [addProperty(Feature, name, FeatureName, _)])), ((L)=([Feature| T])), ((T)=([])), isAncestor(FeatureAncestor, L, Feature), library(temporalFormula(last, [addReference(Feature, operator, Op, _)])), library(temporalFormula(last, [addReference(Op, features, FeatureAncestor, _)]))).
noMutexBetweenMandatoryFeatureChildren(FeatureDiagram, Feature1, Feature2, FeatureName1, FeatureName2, Op, Op2) :- (library(temporalFormula(last, [addProperty(Feature1, name, FeatureName1, _)])), library(temporalFormula(last, [addProperty(Feature2, name, FeatureName2, _)])), not(library(equal(Feature1, Feature2))), library(isTypeOf(Op, mandatory)), library(temporalFormula(last, [addReference(Op, features, Feature1, _)])), library(isTypeOf(Op2, mandatory)), library(temporalFormula(last, [addReference(Op2, features, Feature2, _)])), library(temporalFormula(last, [create(CEMutex, constraintedge, _)])), library(temporalFormula(last, [addReference(FeatureDiagram, constraintedges, CEMutex, _)])), library(temporalFormula(last, [create(Mutex, mutex, _)])), library(temporalFormula(last, [addReference(CEMutex, source, Feature1, _)])), library(temporalFormula(last, [addReference(CEMutex, target, Feature2, _)])), library(temporalFormula(last, [addReference(CEMutex, constraint, Mutex, _)]))).
noMutexBetweenFeatureAndAncestor(FeatureDiagram, Feature1, Feature2, Feature1Name, Feature2Name) :- (library(temporalFormula(last, [addProperty(Feature2, name, Feature2Name, _)])), library(temporalFormula(last, [addProperty(Feature1, name, Feature1Name, _)])), library(temporalFormula(last, [addReference(FeatureDiagram, constraintedges, CEMutex, _)])), library(temporalFormula(last, [create(CEMutex, constraintedge, _)])), isMutex(Feature1, Feature2, CEMutex), ((L)=([Feature2| T])), ((T)=([])), isAncestor(Feature1, L, Feature2)).

% meta facts


% null inheritance


% null feature facts


% end of meta facts
